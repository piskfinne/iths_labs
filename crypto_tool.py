import argparse
import os  # Imported so that the script can remove the redundant file.
from cryptography.fernet import Fernet # Imported so that files can be encrytped using the fernet library.

def load_key(key_file):
    """
    Loads the symmetric encryption key from a file.
    """
    with open(key_file, "rb") as file:
        return file.read()

def encrypt_file(file_name, key_file):
    """
    Encrypts a file using the provided key and replaces the original file with the encrypted version.
    
    Args:
        file_name (str): The file to be encrypted.
        key_file (str): The file used for encryption, simply put containing the encryption/decryption key.
        (The key_file needs to be generated by running the script "generate_key.py)
    """
    # Load the key
    key = load_key(key_file)
    fernet = Fernet(key)
    
    # Read the original file's content as binary
    with open(file_name, "rb") as file:
        file_data = file.read()
    
    # Encrypt the data
    encrypted_data = fernet.encrypt(file_data)
    
    # Save the encrypted data, replacing the original file
    encrypted_file_name = file_name + ".encrypted"
    with open(encrypted_file_name, "wb") as file:
        file.write(encrypted_data)
    
    # Remove the original file
    os.remove(file_name)
    print(f"{file_name} has been encrypted and the original file has been removed.")

def decrypt_file(file_name, key_file):
    """
    Decrypts a file using the provided key and replaces the encrypted file with the decrypted version.
    
    Args:
        file_name (str): The encrypted file.
        key_file (str): The file used for decryption, simply put containing the encryption/decryption key.
    """
    # Load the key
    key = load_key(key_file)
    fernet = Fernet(key)
    
    # Read the encrypted file
    with open(file_name, "rb") as file:
        encrypted_data = file.read()
    
    # Decrypt the data
    try:
        decrypted_data = fernet.decrypt(encrypted_data)
    except Exception as e:
        print(f"Error decrypting file: {e}")
        return
    
    # Save the decrypted data, replacing the original encrypted file
    decrypted_file_name = file_name.replace(".encrypted", "")
    with open(decrypted_file_name, "wb") as file:
        file.write(decrypted_data)
    
    # Remove the encrypted file
    os.remove(file_name)
    print(f"{file_name} has been decrypted and the encrypted file has been removed.")

def main():
    """
    Parses command-line arguments and either encrypts or decrypts the specified file.
    """
    # Argument parsing setup
    parser = argparse.ArgumentParser(description="Encrypt or decrypt files using a symmetric key.")
    parser.add_argument("mode", choices=["encrypt", "decrypt"], help="Mode: 'encrypt' or 'decrypt'.")
    parser.add_argument("file", help="The file to encrypt or decrypt.")
    parser.add_argument("key_file", help="The file containing the symmetric key.")
    
    args = parser.parse_args()
    
    # Perform encryption or decryption based on the mode
    if args.mode == "encrypt":
        encrypt_file(args.file, args.key_file)
    elif args.mode == "decrypt":
        decrypt_file(args.file, args.key_file)

if __name__ == "__main__":
    main()